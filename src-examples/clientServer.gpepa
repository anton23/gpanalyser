rr = 2.0;
rtmt = 0.3;
rt = 0.27;
rb = 0.1;
rd = 1.0;
rrst = 1.0;
n = 100.0;
m = 60.0;

Client = (request,rr).Client_waiting; 
Client_waiting = (data,rd).Client_think; 
Client_think = (think,rt).Client; 

Server = (request,rr).Server_get + (break,rb).Server_broken; 
Server_get = (data,rd).Server; 
Server_broken = (reset,rrst).Server; 

Clients{Client[n]}<request,data>Servers{Server[m]}

Count think data;

ODEs (stopTime=10, stepSize=0.1, density=10) {
	E[#think], E[#data];
}

Probe (stopTime=10, stepSize=0.1, density=10) {
    Probe1 = hujer : start, striga : stop<-
    observes {LProbe = (request):hujer, think:meteleskublesku<-},
    {LP=hujer:metla, meteleskublesku:striga<-}
    where {Clients{Client[n]}
    => Clients{(LP<hujer, meteleskublesku>(Client<request,think>LProbe))[n]}}
}

Probe (stopTime=10, stepSize=0.1, density=10) {
    PM4 = hujer : start, striga : stop<-
    observes {LProbe = (request):hujer, think:meteleskublesku<-},
    {LP=hujer:metla, meteleskublesku:striga<-}
    where {Clients{Client[n]}
    => Clients{(LP<hujer, meteleskublesku>(Client<request,think>LProbe))[n]}}
}

Probe (stopTime=10, stepSize=0.1, density=10) {
    PM5 = hujerik : start, striga : stop<-
    observes {LProbe = (request):hujerik, think:meteleskublesku<-},
    {LP=hujerik:metla, meteleskublesku:striga<-}
    where {Clients{Client[n]}
    => Clients{(LP<hujerik, meteleskublesku>(Client<request,think>LProbe))[n]}}
}
