Client = (request, rr).Clientwaiting;
Clientwaiting = (data, rd).Clientthink + (timeout, rtmt).Client;
Clientthink = (think, rt).Client;
Server = (request, rr).Serverget + (break, rb).Serverbroken;
Serverget = (data, rd).Server + (break, rb).Serverbroken;
Serverbroken = (reset, rrst).Server;

Probe (stopTime=50, stepSize=1, density=10) transient
{
    PM6 = begin : start, end : stop
    observes
    {
        LProbe = recover : begin, (fetch[2] / fail) : end
    }
    where
    {
        Servers {Serv0[m]}
    	    => Servers {Serv0 <recover,fetch,fail> LProbe | Serv0[m-1]}
    }
}
