r_think = 0.05;
r_request = 0.8;
r_timeout = 0.01;

r_allocate = 0.5;
r_allocate_helper = 0.5;

r_schedule = 1;

r_solve_fast = 0.2;
r_req_alloc = 0.8;
r_solve_slow = 0.05;
schedule_fast = 0.6;
schedule_split = 0.4;

nc = 300;
nw = 8;
ns = 30;

Client					= (think, r_think).Client_think;
Client_think			= (request, r_request).Client_request
						+ (timeout, r_timeout).Client;
Client_request			= (wait, r_wait).Client;

Web_server				= (request, r_request).Web_server_request
						+ (req_alloc, r_req_alloc).Web_server_req_alloc;
Web_server_request		= check.Web_server_check;
Web_server_check		= (allocate, r_allocate).Web_server
						+ (timeout, r_timeout).Web_server;
Web_server_req_alloc	= (allocate_helper, r_allocate_helper).Web_server;

Scheduler				= (allocate, r_allocate).Scheduler_allocate;
Scheduler_allocate		= (schedule, r_schedule).Scheduler;

Server					= (schedule, T, schedule_fast).Server_solve_fast
						+ (schedule, T, schedule_split).Server_split
						+ (allocate_helper, r_allocate_helper).Server_solve_slow;
Server_solve_fast		= (solve_fast, r_solve_fast).Server;
Server_split			= (req_alloc, r_req_alloc).Server_solve_slow;
Server_solve_slow		= (solve_slow, r_solve_slow).Server;

CompleteServer = Server <schedule> Scheduler;

(Clients {Client[nc]} <request, timeout> Web_servers{Web_server[nw]})
<allocate, req_alloc, allocate_helper> Servers{CompleteServer[ns]}

/*
ODEs (stopTime=100.0, stepSize=0.1, density=10)
{
    E[%Servers:Server_solve_fast<schedule>_],
    E[%Servers:Server_split<schedule>_],
    E[%Web_servers:Web_server];
}

Simulation (stopTime=100.0, stepSize=0.1, replications=2000)
{
    E[%Servers:Server_solve_fast<schedule>_],
    E[%Servers:Server_split<schedule>_],
    E[%Web_servers:Web_server];
}
*/

Probe ["steady-worked.dat"]
	(stopTime=200, stepSize=1, density=10) steady 500
{
    SIPT = begin : start, end : stop <-
    observes
    {
    	LProbe =  : begin, clt_shutdown : end <-
    }
    where
    {
    	Clients {CB[nc]} =>
    		Clients {CB <data_tfr, cont_tfr, clt_shutdown> LProbe | CB[nc-1]}
    }
}
