r_think = 0.5;
r_request = 2;

r_check_success = 0.9;
r_check_fail = 0.2;
r_add = 0.8;

r_serve = 0.4;
r_init = 0.7;
r_overload = 0.2;

r_reset = 1;
init_success = 0.9;
init_fail = 0.1;

nc = 300;
nb = 10;
ns = 50;

Client				= (think, r_think).Client_think;
Client_think		= (request, r_request).Client;

Scheduler			= (request, r_request).Scheduler_request;
Scheduler_request	= (check, r_check_success).Scheduler_check
					+ (check, r_check_fail).Scheduler;
Scheduler_check		= (add, r_add).Scheduler;

Buffer0				= (add, T).Buffer1;
Buffer1				= (add, T).Buffer2 + (serve, r_serve).Buffer0;
Buffer2				= (add, T).Buffer3 + (serve, r_serve).Buffer1;
Buffer3				= (add, T).Buffer4 + (serve, r_serve).Buffer2;
Buffer4				= (add, T).Buffer5 + (serve, r_serve).Buffer3;
Buffer5				= (add, T).Buffer6 + (serve, r_serve).Buffer4;
Buffer6				= (add, T).Buffer7 + (serve, r_serve).Buffer5;
Buffer7				= (add, T).Buffer8 + (serve, r_serve).Buffer6;
Buffer8				= (add, T).Buffer9 + (serve, r_serve).Buffer7;
Buffer9				= (add, T).Buffer10 + (serve, r_serve).Buffer8;
Buffer10			= (serve, r_serve).Buffer9;

ManagedBuffer = Scheduler <add> Buffer0;

Server				= (initialise, r_init).Server_init;
Server_init			= (serve, r_serve).Server_init
                    + (reset, T).Server
                    + (overload, r_overload).Server_overload;
Server_overload		= reset.Server;

DatabaseDriver		= (initialise, T, init_success).DatabaseDriver_init
					+ (initialise, T, init_fail).DatabaseDriver_fail;
DatabaseDriver_fail	= (reset, r_reset).DatabaseDriver;
DatabaseDriver_init = (serve, T).DatabaseDriver_init
					+ (reset, T).DatabaseDriver;

CompleteServer = Server <initialise, serve, reset> DatabaseDriver;

(Clients{Client[nc]} <request> Buffers{ManagedBuffer[nb]}) <serve> Servers{CompleteServer[ns]}

/*
ODEs (stopTime=100, stepSize=0.1, density=10) {
	E[#serve], E[%Servers:Server<initialise, serve, reset>_];
}
*/

Probe (stopTime=400, stepSize=0.1, density=10) steady 1000
{
    SIPT = begin : start, end : stop <-
    observes
    {
    	LProbe = initialise : begin, serve[7] : end <-
    }
    where
    {
    	Servers {CompleteServer[ns]} =>
    		Servers {CompleteServer <initialise, serve> LProbe
    				 | CompleteServer[ns - 1]}
    }
}